{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Go-Utils \u4e2d\u6587\u6587\u6863 Repo: https://github.com/Laisky/go-utils Document: https://pkg.go.dev/github.com/Laisky/go-utils import gutils \"https://github.com/Laisky/go-utils\"","title":"Home"},{"location":"#go-utils","text":"\u4e2d\u6587\u6587\u6863 Repo: https://github.com/Laisky/go-utils Document: https://pkg.go.dev/github.com/Laisky/go-utils import gutils \"https://github.com/Laisky/go-utils\"","title":"Go-Utils"},{"location":"cn/","text":"Go-Utils \u4e2d\u6587\u6587\u6863 \u8fd9\u662f\u4e00\u4e2a\u5de5\u5177\u5e93\uff0c\u6536\u5f55\u6211\u5728\u5de5\u4f5c\u4e2d\u4e3a\u4e86\u89e3\u51b3\u5404\u79cd\u9700\u6c42\uff0c\u6240\u7f16\u5199\u3001\u6458\u5f55\u7684\u5404\u79cd\u5c0f\u5de5\u5177\u3002 Repo: https://github.com/Laisky/go-utils Document: https://pkg.go.dev/github.com/Laisky/go-utils import gutils \"https://github.com/Laisky/go-utils\" Tools utils","title":"Index"},{"location":"cn/#go-utils","text":"\u8fd9\u662f\u4e00\u4e2a\u5de5\u5177\u5e93\uff0c\u6536\u5f55\u6211\u5728\u5de5\u4f5c\u4e2d\u4e3a\u4e86\u89e3\u51b3\u5404\u79cd\u9700\u6c42\uff0c\u6240\u7f16\u5199\u3001\u6458\u5f55\u7684\u5404\u79cd\u5c0f\u5de5\u5177\u3002 Repo: https://github.com/Laisky/go-utils Document: https://pkg.go.dev/github.com/Laisky/go-utils import gutils \"https://github.com/Laisky/go-utils\"","title":"Go-Utils \u4e2d\u6587\u6587\u6863"},{"location":"cn/#tools","text":"utils","title":"Tools"},{"location":"cn/utils/","text":"utils.go utils.go \u653e\u4e00\u4e9b\u6ca1\u6709\u660e\u786e\u5206\u7c7b\u7684\u5c0f\u5de5\u5177 utils.go JSON IsHasField IsHasMethod ValidateFileHash GetFuncName FallBack RegexNamedSubMatch FlattenMap ForceGCUnBlocking AutoGC TemplateWithMap URLMasking SetStructFieldsBySlice UniqueStrings RemoveEmpty TrimEleSpaceAndRemoveEmpty InArray IsPtr RunCMD Base64Encode ExpCache ExpiredMap JSON github.com/json-iterator/go \u7684\u5c01\u88c5\uff0c\u63d0\u4f9b\u5e38\u7528\u7684 JSON \u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u3002 gutils.JSON.Marshal gutils.JSON.UnMarshal gutils.JSON.MarshalToString gutils.JSON.UnmarshalFromString IsHasField func IsHasField(st interface{}, fieldName string) bool \u5224\u65ad struct \u4e2d\u662f\u5426\u5305\u542b\u67d0\u4e2a field IsHasMethod IsHasMethod(st interface{}, methodName string) bool \u5224\u65ad struct \u4e2d\u662f\u5426\u5305\u542b\u67d0\u4e2a method ValidateFileHash ValidateFileHash(filepath string, hashed string) error \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u5e76\u6bd4\u8f83\u54c8\u5e0c\u3002 hashed \u7684\u683c\u5f0f\u5f62\u5982 sha256:xxx \uff0c\u76ee\u524d\u53ea\u652f\u6301\u4e86 SHA256/MD5\u3002 GetFuncName GetFuncName(f interface{}) string \u83b7\u53d6\u51fd\u6570\u540d FallBack FallBack(orig func() interface{}, fallback interface{}) (ret interface{}) \u6709\u65f6\u5019\u9700\u8981\u8c03\u7528\u4e00\u4e9b\u53ef\u80fd\u4f1a panic \u7684\u51fd\u6570\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5bb9\u5fcd\u8fd9\u4e2a\u51fd\u6570\u8c03\u7528\u5931\u8d25\u3002 \u6240\u4ee5\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u5f53\u8c03\u7528\u5931\u8d25\u7684\u65f6\u5019\uff0c\u5c31\u8fd4\u56de\u8fd9\u4e2a\u9ed8\u8ba4\u503c\u3002 \u9996\u5148\u8c03\u7528 orig() \u8c03\u7528\u6210\u529f\u5219\u8fd4\u56de orig() \u7684\u7ed3\u679c \u8c03\u7528\u5931\u8d25\uff08panic\uff09\u5c31\u8fd4\u56de fallback RegexNamedSubMatch RegexNamedSubMatch(r *regexp.Regexp, str string, subMatchMap map[string]string) error \u6b63\u5219\u5339\u914d\uff0c\u53ef\u4ee5\u628a\u6b63\u5219\u4e2d\u7684 named group \u4ee5 map \u7684\u5f62\u5f0f\u8fd4\u56de\u3002 func ExampleRegexNamedSubMatch() { reg := regexp.MustCompile(`(?P<key>\\d+.*)`) str := \"12345abcde\" groups := map[string]string{} if err := RegexNamedSubMatch(reg, str, groups); err != nil { Logger.Error(\"try to group match got error\", zap.Error(err)) } fmt.Printf(\"got: %+v\", groups) // Output: map[string]string{\"key\": 12345} } FlattenMap FlattenMap(data map[string]interface{}, delimiter string) \u628a\u5d4c\u5957 map \u5c55\u5e73\uff0c\u5c06\u7236 key + delimiter + \u5b50 key \u4f5c\u4e3a\u65b0\u7684 key \u540d\u3002 func ExampleFlattenMap() { data := map[string]interface{}{ \"a\": \"1\", \"b\": map[string]interface{}{ \"c\": 2, \"d\": map[string]interface{}{ \"e\": 3, }, }, } FlattenMap(data, \".\") // Output: {\"a\": \"1\", \"b__c\": 2, \"b__d__e\": 3} } ForceGCUnBlocking ForceGCUnBlocking() \u542f\u52a8 GC\uff0c\u5e76\u4e14\u91ca\u653e\u5185\u5b58\u7f13\u51b2\u533a\u3002 AutoGC AutoGC(ctx context.Context, opts ...GcOptFunc) (err error) \u76d1\u63a7\u5185\u5b58\u4f7f\u7528\u91cf\uff0c\u5f53\u5185\u5b58\u5230\u8fbe 85% \u65f6\u542f\u52a8\u5f3a\u5236 GC\u3002 \u5185\u5b58\u6bd4\u4f8b\u53ef\u4ee5\u901a\u8fc7 gutils.WithGCMemRatio \u8bbe\u7f6e\u3002 \u5185\u5b58 limit \u6587\u4ef6\u8def\u5f84\u53ef\u4ee5\u901a\u8fc7 gutils.WithGCMemLimitFilePath \u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e3a \"/sys/fs/cgroup/memory/memory.limit_in_bytes\" \u3002 TemplateWithMap TemplateWithMap(tpl string, data map[string]interface{}) string \u5c06 tpl \u4e2d\u7684 \"${key}\" \u66ff\u6362\u4e3a data \u4e2d\u8be5 key \u6240\u5bf9\u5e94\u7684\u503c\u3002 URLMasking URLMasking(url, mask string) string \u7b80\u5355\u5730\u53bb\u6389 URL \u91cd\u7684\u8d26\u6237\u5bc6\u7801\u3002 SetStructFieldsBySlice SetStructFieldsBySlice(structs, vals interface{}) (err error) \u7528 slices \u7ed9 struct \u8d4b\u503c\u3002 UniqueStrings UniqueStrings(vs []string) (r []string) \u8fd4\u56de\u53bb\u91cd\u540e\u7684 slice RemoveEmpty RemoveEmpty(vs []string) (r []string) \u53bb\u9664 slice \u4e2d\u7684\u7a7a\u5143\u7d20 TrimEleSpaceAndRemoveEmpty TrimEleSpaceAndRemoveEmpty(vs []string) (r []string) \u5bf9 slice \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u505a TrimSpace \u53bb\u9664\u9996\u4f4d\u7a7a\u683c\uff0c\u7136\u540e\u518d\u53bb\u9664\u6240\u6709\u7a7a\u5143\u7d20\u3002 InArray InArray(collection interface{}, ele interface{}) bool \u5224\u65ad\u5143\u7d20\u662f\u5426\u5728 array/slice \u4e2d IsPtr IsPtr(t interface{}) bool \u662f\u5426\u662f\u6307\u9488 RunCMD RunCMD(ctx context.Context, app string, args ...string) (stdout []byte, err error) \u6267\u884c shell \u547d\u4ee4 Base64Encode Base64Encode(raw []byte) string Base64Decode(encoded string) ([]byte, error) base64 \u7684\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u3002 ExpCache NewExpCache(ctx context.Context, ttl time.Duration) *ExpCache ExpCache \u662f\u4e00\u4e2a\u5e26\u8fc7\u671f\u65f6\u95f4\u7684 map\uff0c\u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a func (c *ExpCache) Store(key, val interface{}) func (c *ExpCache) Load(key interface{}) (data interface{}, ok bool) \u5b58\u50a8\uff08store\uff09\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u4e3a\u8be5 key \u8ba1\u7b97\u4e00\u4e2a expiration = now() + ttl\u3002 \u5230\u8fbe\u8fd9\u4e2a\u65f6\u95f4\u540e\u5c31\u4f1a\u81ea\u52a8\u5220\u9664\u3002 ExpiredMap NewExpiredMap(ctx context.Context, ttl time.Duration, new func() interface{}) (el *ExpiredMap, err error) \u7c7b\u4f3c\u4e8e ExpCache\uff0c\u4e5f\u662f\u4e00\u4e2a\u5e26 ttl \u7684 map\u3002 \u4e0d\u8fc7\u53ea\u5141\u8bb8 Get\uff0c\u4e0d\u5141\u8bb8 Store\uff0c\u6bcf\u4e00\u6b21 Get \u90fd\u4f1a\u81ea\u52a8\u5237\u65b0\u8fc7\u671f\u65f6\u95f4\u3002 \u5f53 Get \u4e00\u4e2a\u4e0d\u5b58\u5728\u7684 key \u65f6\uff0c\u4f1a\u8c03\u7528\u521d\u59cb\u5316\u65f6\u4f20\u5165\u7684 new() \u65b9\u6cd5\u751f\u6210\u4e00\u4e2a\u65b0\u5bf9\u8c61\u5e76\u8fd4\u56de\u3002 func (e *ExpiredMap) Get(key string) interface{}","title":"Utils"},{"location":"cn/utils/#utilsgo","text":"utils.go \u653e\u4e00\u4e9b\u6ca1\u6709\u660e\u786e\u5206\u7c7b\u7684\u5c0f\u5de5\u5177 utils.go JSON IsHasField IsHasMethod ValidateFileHash GetFuncName FallBack RegexNamedSubMatch FlattenMap ForceGCUnBlocking AutoGC TemplateWithMap URLMasking SetStructFieldsBySlice UniqueStrings RemoveEmpty TrimEleSpaceAndRemoveEmpty InArray IsPtr RunCMD Base64Encode ExpCache ExpiredMap","title":"utils.go"},{"location":"cn/utils/#json","text":"github.com/json-iterator/go \u7684\u5c01\u88c5\uff0c\u63d0\u4f9b\u5e38\u7528\u7684 JSON \u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u3002 gutils.JSON.Marshal gutils.JSON.UnMarshal gutils.JSON.MarshalToString gutils.JSON.UnmarshalFromString","title":"JSON"},{"location":"cn/utils/#ishasfield","text":"func IsHasField(st interface{}, fieldName string) bool \u5224\u65ad struct \u4e2d\u662f\u5426\u5305\u542b\u67d0\u4e2a field","title":"IsHasField"},{"location":"cn/utils/#ishasmethod","text":"IsHasMethod(st interface{}, methodName string) bool \u5224\u65ad struct \u4e2d\u662f\u5426\u5305\u542b\u67d0\u4e2a method","title":"IsHasMethod"},{"location":"cn/utils/#validatefilehash","text":"ValidateFileHash(filepath string, hashed string) error \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u5e76\u6bd4\u8f83\u54c8\u5e0c\u3002 hashed \u7684\u683c\u5f0f\u5f62\u5982 sha256:xxx \uff0c\u76ee\u524d\u53ea\u652f\u6301\u4e86 SHA256/MD5\u3002","title":"ValidateFileHash"},{"location":"cn/utils/#getfuncname","text":"GetFuncName(f interface{}) string \u83b7\u53d6\u51fd\u6570\u540d","title":"GetFuncName"},{"location":"cn/utils/#fallback","text":"FallBack(orig func() interface{}, fallback interface{}) (ret interface{}) \u6709\u65f6\u5019\u9700\u8981\u8c03\u7528\u4e00\u4e9b\u53ef\u80fd\u4f1a panic \u7684\u51fd\u6570\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5bb9\u5fcd\u8fd9\u4e2a\u51fd\u6570\u8c03\u7528\u5931\u8d25\u3002 \u6240\u4ee5\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u5f53\u8c03\u7528\u5931\u8d25\u7684\u65f6\u5019\uff0c\u5c31\u8fd4\u56de\u8fd9\u4e2a\u9ed8\u8ba4\u503c\u3002 \u9996\u5148\u8c03\u7528 orig() \u8c03\u7528\u6210\u529f\u5219\u8fd4\u56de orig() \u7684\u7ed3\u679c \u8c03\u7528\u5931\u8d25\uff08panic\uff09\u5c31\u8fd4\u56de fallback","title":"FallBack"},{"location":"cn/utils/#regexnamedsubmatch","text":"RegexNamedSubMatch(r *regexp.Regexp, str string, subMatchMap map[string]string) error \u6b63\u5219\u5339\u914d\uff0c\u53ef\u4ee5\u628a\u6b63\u5219\u4e2d\u7684 named group \u4ee5 map \u7684\u5f62\u5f0f\u8fd4\u56de\u3002 func ExampleRegexNamedSubMatch() { reg := regexp.MustCompile(`(?P<key>\\d+.*)`) str := \"12345abcde\" groups := map[string]string{} if err := RegexNamedSubMatch(reg, str, groups); err != nil { Logger.Error(\"try to group match got error\", zap.Error(err)) } fmt.Printf(\"got: %+v\", groups) // Output: map[string]string{\"key\": 12345} }","title":"RegexNamedSubMatch"},{"location":"cn/utils/#flattenmap","text":"FlattenMap(data map[string]interface{}, delimiter string) \u628a\u5d4c\u5957 map \u5c55\u5e73\uff0c\u5c06\u7236 key + delimiter + \u5b50 key \u4f5c\u4e3a\u65b0\u7684 key \u540d\u3002 func ExampleFlattenMap() { data := map[string]interface{}{ \"a\": \"1\", \"b\": map[string]interface{}{ \"c\": 2, \"d\": map[string]interface{}{ \"e\": 3, }, }, } FlattenMap(data, \".\") // Output: {\"a\": \"1\", \"b__c\": 2, \"b__d__e\": 3} }","title":"FlattenMap"},{"location":"cn/utils/#forcegcunblocking","text":"ForceGCUnBlocking() \u542f\u52a8 GC\uff0c\u5e76\u4e14\u91ca\u653e\u5185\u5b58\u7f13\u51b2\u533a\u3002","title":"ForceGCUnBlocking"},{"location":"cn/utils/#autogc","text":"AutoGC(ctx context.Context, opts ...GcOptFunc) (err error) \u76d1\u63a7\u5185\u5b58\u4f7f\u7528\u91cf\uff0c\u5f53\u5185\u5b58\u5230\u8fbe 85% \u65f6\u542f\u52a8\u5f3a\u5236 GC\u3002 \u5185\u5b58\u6bd4\u4f8b\u53ef\u4ee5\u901a\u8fc7 gutils.WithGCMemRatio \u8bbe\u7f6e\u3002 \u5185\u5b58 limit \u6587\u4ef6\u8def\u5f84\u53ef\u4ee5\u901a\u8fc7 gutils.WithGCMemLimitFilePath \u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e3a \"/sys/fs/cgroup/memory/memory.limit_in_bytes\" \u3002","title":"AutoGC"},{"location":"cn/utils/#templatewithmap","text":"TemplateWithMap(tpl string, data map[string]interface{}) string \u5c06 tpl \u4e2d\u7684 \"${key}\" \u66ff\u6362\u4e3a data \u4e2d\u8be5 key \u6240\u5bf9\u5e94\u7684\u503c\u3002","title":"TemplateWithMap"},{"location":"cn/utils/#urlmasking","text":"URLMasking(url, mask string) string \u7b80\u5355\u5730\u53bb\u6389 URL \u91cd\u7684\u8d26\u6237\u5bc6\u7801\u3002","title":"URLMasking"},{"location":"cn/utils/#setstructfieldsbyslice","text":"SetStructFieldsBySlice(structs, vals interface{}) (err error) \u7528 slices \u7ed9 struct \u8d4b\u503c\u3002","title":"SetStructFieldsBySlice"},{"location":"cn/utils/#uniquestrings","text":"UniqueStrings(vs []string) (r []string) \u8fd4\u56de\u53bb\u91cd\u540e\u7684 slice","title":"UniqueStrings"},{"location":"cn/utils/#removeempty","text":"RemoveEmpty(vs []string) (r []string) \u53bb\u9664 slice \u4e2d\u7684\u7a7a\u5143\u7d20","title":"RemoveEmpty"},{"location":"cn/utils/#trimelespaceandremoveempty","text":"TrimEleSpaceAndRemoveEmpty(vs []string) (r []string) \u5bf9 slice \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u505a TrimSpace \u53bb\u9664\u9996\u4f4d\u7a7a\u683c\uff0c\u7136\u540e\u518d\u53bb\u9664\u6240\u6709\u7a7a\u5143\u7d20\u3002","title":"TrimEleSpaceAndRemoveEmpty"},{"location":"cn/utils/#inarray","text":"InArray(collection interface{}, ele interface{}) bool \u5224\u65ad\u5143\u7d20\u662f\u5426\u5728 array/slice \u4e2d","title":"InArray"},{"location":"cn/utils/#isptr","text":"IsPtr(t interface{}) bool \u662f\u5426\u662f\u6307\u9488","title":"IsPtr"},{"location":"cn/utils/#runcmd","text":"RunCMD(ctx context.Context, app string, args ...string) (stdout []byte, err error) \u6267\u884c shell \u547d\u4ee4","title":"RunCMD"},{"location":"cn/utils/#base64encode","text":"Base64Encode(raw []byte) string Base64Decode(encoded string) ([]byte, error) base64 \u7684\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u3002","title":"Base64Encode"},{"location":"cn/utils/#expcache","text":"NewExpCache(ctx context.Context, ttl time.Duration) *ExpCache ExpCache \u662f\u4e00\u4e2a\u5e26\u8fc7\u671f\u65f6\u95f4\u7684 map\uff0c\u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a func (c *ExpCache) Store(key, val interface{}) func (c *ExpCache) Load(key interface{}) (data interface{}, ok bool) \u5b58\u50a8\uff08store\uff09\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u4e3a\u8be5 key \u8ba1\u7b97\u4e00\u4e2a expiration = now() + ttl\u3002 \u5230\u8fbe\u8fd9\u4e2a\u65f6\u95f4\u540e\u5c31\u4f1a\u81ea\u52a8\u5220\u9664\u3002","title":"ExpCache"},{"location":"cn/utils/#expiredmap","text":"NewExpiredMap(ctx context.Context, ttl time.Duration, new func() interface{}) (el *ExpiredMap, err error) \u7c7b\u4f3c\u4e8e ExpCache\uff0c\u4e5f\u662f\u4e00\u4e2a\u5e26 ttl \u7684 map\u3002 \u4e0d\u8fc7\u53ea\u5141\u8bb8 Get\uff0c\u4e0d\u5141\u8bb8 Store\uff0c\u6bcf\u4e00\u6b21 Get \u90fd\u4f1a\u81ea\u52a8\u5237\u65b0\u8fc7\u671f\u65f6\u95f4\u3002 \u5f53 Get \u4e00\u4e2a\u4e0d\u5b58\u5728\u7684 key \u65f6\uff0c\u4f1a\u8c03\u7528\u521d\u59cb\u5316\u65f6\u4f20\u5165\u7684 new() \u65b9\u6cd5\u751f\u6210\u4e00\u4e2a\u65b0\u5bf9\u8c61\u5e76\u8fd4\u56de\u3002 func (e *ExpiredMap) Get(key string) interface{}","title":"ExpiredMap"}]}