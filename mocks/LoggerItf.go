// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	zapcore "github.com/Laisky/zap/zapcore"
)

// LoggerItf is an autogenerated mock type for the LoggerItf type
type LoggerItf struct {
	mock.Mock
}

// ChangeLevel provides a mock function with given fields: level
func (_m *LoggerItf) ChangeLevel(level string) error {
	ret := _m.Called(level)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(level)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Core provides a mock function with given fields:
func (_m *LoggerItf) Core() zapcore.Core {
	ret := _m.Called()

	var r0 zapcore.Core
	if rf, ok := ret.Get(0).(func() zapcore.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(zapcore.Core)
		}
	}

	return r0
}

// DPanic provides a mock function with given fields: msg, fields
func (_m *LoggerItf) DPanic(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Debug provides a mock function with given fields: msg, fields
func (_m *LoggerItf) Debug(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// DebugSample provides a mock function with given fields: sample, msg, fields
func (_m *LoggerItf) DebugSample(sample int, msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, sample, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: msg, fields
func (_m *LoggerItf) Error(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: msg, fields
func (_m *LoggerItf) Fatal(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: msg, fields
func (_m *LoggerItf) Info(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// InfoSample provides a mock function with given fields: sample, msg, fields
func (_m *LoggerItf) InfoSample(sample int, msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, sample, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Level provides a mock function with given fields:
func (_m *LoggerItf) Level() zapcore.Level {
	ret := _m.Called()

	var r0 zapcore.Level
	if rf, ok := ret.Get(0).(func() zapcore.Level); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(zapcore.Level)
	}

	return r0
}

// Panic provides a mock function with given fields: msg, fields
func (_m *LoggerItf) Panic(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Sync provides a mock function with given fields:
func (_m *LoggerItf) Sync() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Warn provides a mock function with given fields: msg, fields
func (_m *LoggerItf) Warn(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// WarnSample provides a mock function with given fields: sample, msg, fields
func (_m *LoggerItf) WarnSample(sample int, msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, sample, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}
